<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Draft on Bits &amp; pieces - Sven Wehrend</title>
    <link>http://wehrend.uber.space/tags/draft/</link>
    <description>Recent content in Draft on Bits &amp; pieces - Sven Wehrend</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 May 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://wehrend.uber.space/tags/draft/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How does a CPU work 2? Overview</title>
      <link>http://wehrend.uber.space/pages/overview2/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      <guid>http://wehrend.uber.space/pages/overview2/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_how_does_a_cpu_work_2_table_of_contents&#34;&gt;How does a CPU work 2 - Table of contents&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_from_combinatorial_to_sequential_logic_introduction&#34;&gt;&lt;strong&gt;From Combinatorial to Sequential Logic - Introduction&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://wehrend.uber.space/docs/digital_logic_2/10_sequential_logic&#34;&gt;Introduction to Sequential Logic&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;We get from purely conmbinatorial logic circuits wihout any form of memeory to sequential logic circuits with some&#xA;type of memory (mostly flipflops)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_clocksflipflops_and_registers&#34;&gt;&lt;strong&gt;Clocks,Flipflops and registers&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://wehrend.uber.space/docs/digital_logic_2/11_clocks_and_registers/&#34;&gt;Clocks,flipflops and registers&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;We make a leap into the area of sequential logic and introduce some concepts vital  for the sequential logics,&#xA;like clock, flipflops and registers&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>X2_cordic</title>
      <link>http://wehrend.uber.space/docs/digital_logic_x/x2_cordic/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://wehrend.uber.space/docs/digital_logic_x/x2_cordic/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_cordic_algoritm_and_direct_digital_synthesis_dds&#34;&gt;The CORDIC algoritm and direct digital synthesis (DDS)&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The CORDIC (which stands for &amp;#34;coordinate rotation digital computer&amp;#34;) algorithm, was developed in 1956 by Jack.E. Volder, to&#xA;replace the analog resolvers used for missiles navigation by digital computation on digital computer.&#xA;The algorithm turned out to be very successfull, today it can be found in every pocket calculator, doing&#xA;the computation of the trigonometrical functions sinus, cosinus and tangens. But the algorithm is not limited to that&#xA;it can also calculate logarithmic and exponential functions, given the needed modifications.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>X0_multiplication</title>
      <link>http://wehrend.uber.space/docs/digital_logic_x/x0_multiplication/</link>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://wehrend.uber.space/docs/digital_logic_x/x0_multiplication/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_multiplication_and_divsion&#34;&gt;Multiplication and Divsion&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Multiplication operations can be implemented in very&#xA;different ways: Slow, as a serial operation, controlled by a&#xA;micro program or fast in dedicated hardware.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The division is a more complex operation, and thus will be discussed&#xA;in another post.&#xA;Also for multiplication we set the scope to unsigned integer numbers.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_shift_left_and_shift_right&#34;&gt;Shift left and shift right&lt;/h3&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For multipliers that are powers of two, the operation is very&#xA;simple and can be implemented via a shift left.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>07_RISC-V</title>
      <link>http://wehrend.uber.space/docs/digital_logic/07_risc_v/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      <guid>http://wehrend.uber.space/docs/digital_logic/07_risc_v/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_digital_design_meets_computer_architecture&#34;&gt;Digital design meets computer architecture&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h1 id=&#34;_risc_vs_cisc_and_the_risc_v_architecture&#34; class=&#34;sect0&#34;&gt;RISC vs CISC and The RISC-V architecture&lt;/h1&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Existing processor types can be classified by their instruction type set:&#xA;Reduced instruction set computer (RISC), Complex instruction set computer (CISC) and hybrid forms.&#xA;While mini processors like ARM for embedded systems mostly utilise reduced instruction&#xA;sets,todays workstation and Server Architectures (x86, x86_64) are hybrids of RISC and CISC.&#xA;The idea of a reduced instruction set is to avoid big complex instructions and multiple different&#xA;addressing modes (as those typically used in x86 architectures).&#xA;Advantages of a RISC architecture are shorter pipelines which allows faster clocking.&#xA;RISC architectures follow a simple scheme: &amp;#39;Fetch → Decode → Fetch Operands → Execute → Write Back&amp;#39;&#xA;Also instructions have a constant length, memory operations are divided from arithmetic operations,&#xA;which is known as Load/Store-architecture. RISC-V is an open standard for the instruction set archtitecture (ISA).&#xA;Most of this post is referenced from the popular book Computer Organization and Design (RISC-V) Edition by Hennessey and Patterson.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>How does a CPU work? Overview</title>
      <link>http://wehrend.uber.space/pages/overview/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://wehrend.uber.space/pages/overview/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_how_does_a_cpu_work_table_of_contents&#34;&gt;How does a CPU work - Table of contents&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_introduction_and_overview&#34;&gt;&lt;strong&gt;Introduction and overview&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Introduction and overview&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Every topic of this course is broken up into two parts:&#xA;A part about the mathematical side of digital logic,&#xA;ideally almost independent from implementation details&#xA;and a more concrete part handling this very details.&#xA;In the concrete part we will mostly discuss the implementation&#xA;on an electrical layer, though there are still other solutions&#xA;possible based on &lt;a href=&#34;https://erik-engheim.medium.com/microprocessors-running-on-air-a47a702dd41f&#34;&gt;fluid dynamics&lt;/a&gt;,&#xA;or &lt;a href=&#34;https://www.photonics.com/Articles/All-Optical_Logic_Gates_Show_Promise_for_Optical/a63226&#34;&gt;optical gates&lt;/a&gt;,&#xA;most computers and logic gates are still based on electronics and semiconductor technology and this will not&#xA;change with &lt;a href=&#34;https://www.azom.com/article.aspx?ArticleID=17173&#34;&gt;quantum computing&lt;/a&gt;, which is mostly tied to / adjunct to&#xA;probability theory. However with quantum computing&#xA;the fundamentals behind which the author describes here will completly change.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
